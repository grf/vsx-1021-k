#!/usr/bin/env ruby

# This script takes one flag and sets the VSX to set the inputs to one of:
#
# --chromecast    - set to VICEO_1
# --mac-display   - set to DVR_BDR
# --roku          - set to BD
# --satyagraha    - set to DVD
# --wuft          - set to TUNER, FM, station 89.1
#
# also:
#
# --list          - gives the lists of options above (thinking REST server for the future)


$LOAD_PATH.unshift  File.expand_path(File.dirname(__FILE__) + "/../lib")
require 'vsx'
require 'optparse'

# TODO: not sure about these settings;  need to check DB output at several volumes settings...

VOLUMES = { satya: -25, chrome: -25, wuft: -30, roku: -30, mac: -30 }


def usage
  STDERR.puts "Usage: #{$0.sub(/.*\//, '')} [ --chromecast | --mac-display | --roku | --satyagraha | --wuft | --list ]"
  exit 1
end


def get_input_device_from_commandline args
  input_device, number_of_arguments = nil, 0

  opts   = OptionParser.new do |opt|
    opt.on("--chromecast",   "set VSX to use chromecast")  { input_device = :chrome; number_of_arguments += 1 }
    opt.on("--mac-display",  "set VSX to use mac display") { input_device = :mac;    number_of_arguments += 1 }
    opt.on("--roku",         "set VSX to use roku")        { input_device = :roku;   number_of_arguments += 1 }
    opt.on("--satyagraha",   "set VSX to use server")      { input_device = :satya;  number_of_arguments += 1 }
    opt.on("--wuft",         "set VSX to use WUFT")        { input_device = :wuft;   number_of_arguments += 1 }

    opt.on("--list",         "list available devices")     { input_device = :list;   number_of_arguments += 1 }
  end
  opts.parse!(args)

  usage unless number_of_arguments == 1

  if input_device == :list
    puts "chromecast mac-display roku satyagraha wuft"
    exit 0
  end

rescue => e
  STDERR.puts e, opts
  exit -1

else
  return input_device
end


def wuft? vsx
  # puts 'wuft?'
  return (vsx.tuner.selected?) &&
         (vsx.volume.db >= VOLUMES[:wuft]) &&
         (vsx.listening_mode == Vsx::STEREO_DIRECT_SET) &&
         (vsx.tuner.frequency == 89.1) &&
         (vsx.tuner.band == :fm) &&
         (not vsx.volume.muted?)
end


def satya? vsx
  # puts 'satya?'
  return (vsx.dvd.selected?) &&
         (vsx.volume.db >= VOLUMES[:satya]) &&
         (not vsx.volume.muted?) &&
         (vsx.listening_mode == Vsx::STEREO_DIRECT_SET)
end


def roku? vsx
  # puts 'roku?'
  return (vsx.bd.selected?) &&
         (vsx.volume.db >= VOLUMES[:roku]) &&
         (not vsx.volume.muted?) &&
         (vsx.listening_mode == Vsx::STEREO_DIRECT_SET)
end


def mac? vsx
  # puts 'mac?'
  return (vsx.dvrbdr.selected?) &&
         (vsx.volume.db >= VOLUMES[:mac]) &&
         (not vsx.volume.muted?) &&
         (vsx.listening_mode == Vsx::STEREO_DIRECT_SET)
end


def chrome? vsx
  # puts 'chrome?'
  return (vsx.video1.selected?) &&
         (vsx.volume.db >= VOLUMES[:chrome]) &&
         (not vsx.volume.muted?) &&
         (vsx.listening_mode == Vsx::STEREO_DIRECT_SET)
end


begin
  input_device = get_input_device_from_commandline(ARGV)

  vsx = Vsx.new('vsx.sacred.net')

  was_off = vsx.off?
  vsx.on

  vsx.listening_mode = Vsx::STEREO_DIRECT_SET
  vsx.volume.db = -50
  vsx.volume.unmute

  case input_device
  when :chrome;    vsx.video1.select unless chrome?(vsx)
  when :mac;       vsx.dvrbdr.select unless mac?(vsx)
  when :satya;     vsx.dvd.select    unless satya?(vsx)
  when :roku;      vsx.bd.select     unless roku?(vsx)
  when :wuft
    unless wuft?(vsx)
      vsx.tuner.select
      vsx.tuner.frequency = 89.1
      vsx.tuner.band = :fm
    end
  else
    usage
  end

  if was_off
    puts 'sleeping'
    sleep 5
  end

  vsx.volume.fade_in VOLUMES[input_device]

rescue => e
  puts "Oops: #{e.class}"
  puts e.message
  puts e.backtrace
end
