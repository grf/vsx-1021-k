#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), './lib/'))
$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '../lib/'))

require 'socket'
require 'time'


class Tuner

  def initialize vsx
    @vsx = vsx
  end


  def band
    case inquire
    when /^FRF\d+$/: :FM 
    when /^FRA\d+$/: :AM 
    end
  end


  def frequency
    case inquire
    when /^FRF(\d+)$/: $1.to_i / 100.0
    when /^FRA(\d+)$/: $1.to_i / 1.0
    end
  end


  def band= value
    raise "band can't be set to #{value}" unless [:FM, :AM].include? value
    return if band == value

    # otherwise, we need to set to the tuner, 
    @vsx.....

  end


  private
  
  def inquire
    @vsx.write "?FR"
    @vsx.read
  end

end




class Vsx

  def initialize hostname
    @hostname = hostname
    @socket = TCPSocket::new(@hostname, 23)
    @buff = ''
    @responses = []
  end

  def write str = ""
    @socket.write str + "\r\n"
  end

  def read
    return @responses.shift unless @responses.empty?

    results = select([ @socket ], nil, nil, 0.5)

    @buff += @socket.recv(4 * 1024) if (results and results[0].include? @socket)

    if @buff =~ /^(.*\r\n)(.*)$/m        # check for all completed input (ends with CRLF, aka \r\n)
       @buff = $2                        # save partial response for later
       @responses += $1.split(/\r\n/)    # get all the completed responses 
    end

    @responses.shift
  end


  def close
    @socket.close
  end


end



vsx = Vsx.new("vsx.sacred.net")


tuner = Tuner.new(vsx)

puts tuner.band
puts tuner.frequency

tuner.band = :FM

