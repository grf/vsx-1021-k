#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), './lib/'))
$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '../lib/'))

require 'net/telnet'
require 'vsx'

[ 'output.log', 'dump.log' ].each { |name| File.delete name if File.exist? name }

queries = [
           ATTENTION,
           POWERED,
           MUTED,
           VOLUME_SETTING,
           DEVICE_SETTING,
           TUNER_SETTING,
           AUDIO_STATUS,
           VIDEO_STATUS,
           ATTENTION,
          ]

def do_query vsx, device_interaction
  device_command = device_interaction[:command_string]

  vsx.cmd(device_command) do |device_response| 

    device_response.strip!
    handler = device_interaction[:handler]
    title = device_interaction[:label] + ': '

    # STDERR.puts "'#{device_command}' => '#{device_response}';   using #{handler.inspect}"

    case handler 

      # no handler yet supplied for this command (only in development):
    when NilClass
      puts title + "general response '#{device_response}'"

      # dictionary lookup (or fail):
    when Hash
      rsp = handler[device_response]
      puts title + ( rsp.nil? ? "unexepected response '#{device_response}' for command '#{device_command}'" : rsp.inspect )

      # specialized function to call:
    when Proc
      puts title + handler.call(device_response)

      # something odd happened:
    else 
      puts title + "huh? unexepected handler for device command '#{device_command}' (#{handler.inspect}) - device responded '#{device_response}'"
    end

  end
end


vsx = Net::Telnet::new(
                       "Host"       => "vsx.sacred.net",
                       "Port"       => 23,
                       "Output_log" => "output.log",
                       "Dump_log"   => "dump.log",
                       "Prompt"     => /\z/,
                       "Telnetmode" => false,
                       "Timeout"    => 1,
                       "Waittime"   => 0.1
                       )

queries.each do |q| 
  # STDERR.puts "doing " + q[:label] + " check"
  do_query(vsx, q)
end



# Power up sequence...
#
# PZ
# PWR0
# LM0401
# LM0401
# FL022020202020204344202020202020
# FN01
# VTA111111111111111111000000000000
# FL022020202053544552454F20202020
# FL022020202020204344202020202020
# FL022020202053544552454F20202020


# Audio Signal Information
# ?AST
# AST0104000000000000000000000101000001000000000

# Audio Status: general response 'AST0401101000000000000000000101000001000000000'
# Video Status: general response 'VST40721010723010900000000000000'



#  01
#  04

# Input channel format paramters
#
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0
#  0

# Output channel:

#  1  L    Main Left
#  0  C    Main Center
#  1  R    Main Right
#  0  SL   Surround Left
#  0  SR   Surround Right
#  0  SBL  Surround Back Left
#  0  SB   Surround Back Center
#  0  SBR  Surround Back Right
#  1  SW   SubWoofer
#  0  FHL  Front-High Left
#  0  FHR  Front-High Right
#  0  FWL  Front-Wide Left
#  0  FWR  Front-Wide Right
#  0  Reserved
#  0  Reserved
#  0  Reserved
#  0  Reserved
#  0  Reserved


# ?VST
# VST50000000000000000000000000000
